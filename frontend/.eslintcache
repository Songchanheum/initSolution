[{"C:\\data\\workspace\\2021\\me-client\\src\\index.js":"1","C:\\data\\workspace\\2021\\me-client\\src\\App.js":"2","C:\\data\\workspace\\2021\\me-client\\src\\store\\Store.js":"3","C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\index.js":"4","C:\\data\\workspace\\2021\\me-client\\src\\PageList.js":"5","C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\session.js":"6","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\Footer.js":"7","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\Header.js":"8","C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\common\\mapComponent.js":"9","C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\common\\overlyaManagerComponent.js":"10","C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\History.js":"11","C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\Menu2.js":"12","C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\LoginContainer.js":"13","C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\Menu1.js":"14","C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\MapContainer.js":"15","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\MapComponent.js":"16","C:\\data\\workspace\\2021\\me-client\\src\\common\\index.js":"17","C:\\data\\workspace\\2021\\me-client\\src\\main\\index.js":"18","C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\Stack.js":"19","C:\\data\\workspace\\2021\\me-client\\src\\main\\component\\TestPopup.js":"20","C:\\data\\workspace\\2021\\me-client\\src\\main\\service\\MainService.js":"21","C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\StorageHelper.js":"22","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\SessionRoute.js":"23","C:\\data\\workspace\\2021\\me-client\\src\\common\\service\\CommonService.js":"24","C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\MainContainer.js":"25","C:\\data\\workspace\\2021\\me-client\\src\\data1.js":"26","C:\\data\\workspace\\2021\\me-client\\src\\data.js":"27","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\OverLayComponent.js":"28","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\OverlayManagerComponent.js":"29","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\withModalPopup.js":"30","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\wrapParamComponent.js":"31","C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\usePrevious.js":"32","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\index.js":"33","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\App.js":"34","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\container\\Menu2.js":"35","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\container\\Menu1.js":"36","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\container\\MainContainer.js":"37","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\reportWebVitals.js":"38","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\common\\component\\Header.js":"39","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\service\\MainService.js":"40"},{"size":1554,"mtime":1612337039159,"results":"41","hashOfConfig":"42"},{"size":1802,"mtime":1612337039148,"results":"43","hashOfConfig":"42"},{"size":463,"mtime":1612337039164,"results":"44","hashOfConfig":"42"},{"size":587,"mtime":1612337039165,"results":"45","hashOfConfig":"42"},{"size":5510,"mtime":1612337039149,"results":"46","hashOfConfig":"42"},{"size":842,"mtime":1612337039166,"results":"47","hashOfConfig":"42"},{"size":180,"mtime":1612337039150,"results":"48","hashOfConfig":"42"},{"size":1233,"mtime":1612337039150,"results":"49","hashOfConfig":"42"},{"size":1257,"mtime":1612337039165,"results":"50","hashOfConfig":"42"},{"size":484,"mtime":1612337039165,"results":"51","hashOfConfig":"42"},{"size":1012,"mtime":1612337039155,"results":"52","hashOfConfig":"42"},{"size":155,"mtime":1612337039162,"results":"53","hashOfConfig":"42"},{"size":4906,"mtime":1612337039161,"results":"54","hashOfConfig":"42"},{"size":155,"mtime":1612337039162,"results":"55","hashOfConfig":"42"},{"size":3345,"mtime":1612337039161,"results":"56","hashOfConfig":"42"},{"size":16664,"mtime":1612337039151,"results":"57","hashOfConfig":"42"},{"size":235,"mtime":1612337039154,"results":"58","hashOfConfig":"42"},{"size":166,"mtime":1612337039162,"results":"59","hashOfConfig":"42"},{"size":318,"mtime":1612337039156,"results":"60","hashOfConfig":"42"},{"size":285,"mtime":1612337039160,"results":"61","hashOfConfig":"42"},{"size":462,"mtime":1612337039163,"results":"62","hashOfConfig":"42"},{"size":1624,"mtime":1612337039156,"results":"63","hashOfConfig":"42"},{"size":919,"mtime":1612337039152,"results":"64","hashOfConfig":"42"},{"size":118,"mtime":1613366092336,"results":"65","hashOfConfig":"42"},{"size":1178,"mtime":1613366010501,"results":"66","hashOfConfig":"42"},{"size":57577,"mtime":1612337039158,"results":"67","hashOfConfig":"42"},{"size":54664,"mtime":1612337039157,"results":"68","hashOfConfig":"42"},{"size":549,"mtime":1612337039152,"results":"69","hashOfConfig":"42"},{"size":11047,"mtime":1612337039152,"results":"70","hashOfConfig":"42"},{"size":1215,"mtime":1612337039153,"results":"71","hashOfConfig":"42"},{"size":286,"mtime":1612337039154,"results":"72","hashOfConfig":"42"},{"size":537,"mtime":1612337039156,"results":"73","hashOfConfig":"42"},{"size":638,"mtime":1630464730762,"results":"74","hashOfConfig":"75"},{"size":1634,"mtime":1630471459811,"results":"76","hashOfConfig":"75"},{"size":155,"mtime":1630463169478,"results":"77","hashOfConfig":"75"},{"size":248,"mtime":1630465688642,"results":"78","hashOfConfig":"75"},{"size":639,"mtime":1630471514185,"results":"79","hashOfConfig":"75"},{"size":424,"mtime":1630464286367,"results":"80","hashOfConfig":"75"},{"size":919,"mtime":1630471804720,"results":"81","hashOfConfig":"75"},{"size":138,"mtime":1630471275841,"results":"82","hashOfConfig":"75"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},"fzfiw2",{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"168"},"sauewj",{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"168"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\data\\workspace\\2021\\me-client\\src\\index.js",["184"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from 'App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nimport { positions, Provider as AlertProvider } from \"react-alert\";\r\nimport AlertMUITemplate from \"react-alert-template-mui\";\r\nimport AlertTemplate from 'react-alert-template-basic';\r\n\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from 'store/Store';\r\n\r\nconst options = {\r\n    // you can also just use 'bottom center'\r\n    position: positions.MIDDLE,\r\n    timeout: 5000,\r\n    offset: '30px',\r\n    // you can also just use 'scale'\r\n    // transition: transitions.SCALE,\r\n    containerStyle: {\r\n        zIndex: 9999\r\n    }\r\n}\r\n\r\n// const options = {\r\n//     position: positions.MIDDLE,\r\n// }\r\n\r\nconst Root = () => (\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <PersistGate persistor={persistor}>\r\n                <AlertProvider template={AlertTemplate} {...options}>\r\n                    <App />\r\n                </AlertProvider>\r\n            </PersistGate>\r\n        </Provider>\r\n    </React.StrictMode>\r\n);\r\n\r\nlet reactapp = document.createElement(\"div\");\r\ndocument.body.appendChild(reactapp);\r\n\r\nReactDOM.render(<Root />, reactapp);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n",["185","186"],"C:\\data\\workspace\\2021\\me-client\\src\\App.js",["187"],"import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\nimport { useAlert } from 'react-alert';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport PageList from 'PageList';\r\n\r\nimport Header from 'common/component/Header';\r\nimport Footer from 'common/component/Footer';\r\n\r\nimport * as sessionModules from 'store/modules/session';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = (props) => {\r\n    const alert = useAlert();\r\n    axios.defaults.baseURL = '/me';\r\n    axios.defaults.headers.common[\"Request-Type\"] = \"AJAX\";\r\n    \r\n    return (\r\n        <Scrollbars\r\n            autoHide\r\n            autoHeight\r\n            autoHeightMin={\"100%\"}\r\n            autoHeightMax={\"100vh\"}\r\n        >\r\n            <Router basename={'/'}>\r\n                <Header {...props}></Header>\r\n                <Route render={({ location, history }) => {\r\n                    return (\r\n                        <PageList\r\n                            {...{\r\n                                ...props,\r\n                                location : location,\r\n                                history : history\r\n                            }}\r\n                        ></PageList>\r\n                    );\r\n                } } />\r\n                </Router>\r\n                <Footer {...props}></Footer>\r\n        </Scrollbars>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ session }) => ({\r\n    login: session.login,\r\n    userInfo: session.userInfo\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    sessionReducer: bindActionCreators(sessionModules, dispatch)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","C:\\data\\workspace\\2021\\me-client\\src\\store\\Store.js",["188","189","190"],"import { applyMiddleware, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport rootReducer from './modules/index';\r\n\r\nconst devTools =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst middlewares = [logger];\r\nexport const store = createStore(rootReducer, devTools);\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistor };","C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\index.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\PageList.js",["191","192","193","194","195"],"import React, { useEffect, useState, useMemo, Suspense } from 'react';\r\nimport lazy from \"react-lazy-with-preload\";\r\n\r\nimport { \r\n    Route, \r\n    Switch \r\n} from 'react-router-dom';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nimport { useAlert } from 'react-alert';\r\n\r\nimport { MainContainer } from 'main';\r\nimport { commonService, SessionRoute } from 'common';\r\nimport History from 'common/util/History';\r\n\r\nimport * as sessionModules from 'store/modules/session'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport 'css/transition.css'\r\n\r\nconst LoginContainer = lazy(() => import('main/container/LoginContainer'));\r\nconst Menu1 = lazy(() => import('main/container/Menu1'));\r\nconst Menu2 = lazy(() => import('main/container/Menu2'));\r\nconst MapContainer = lazy(() => import('main/container/MapContainer'));\r\n\r\nLoginContainer.preload();\r\nMenu1.preload();\r\nMenu2.preload();\r\nMapContainer.preload();\r\n\r\nconst PageList = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const { location, history } = props;\r\n    const [historyStack, setHistoryStack] = useState({\r\n        historyStack : new History()\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n        if(props.login){\r\n            //localStorage에 login상태가 true일 때 실제로 서버 session도 \r\n            //유효한지 여부 확인\r\n            commonService.checkSession()\r\n            .catch((error) => {\r\n                //세션 타임아웃 시 \r\n                //로그 아웃 처리\r\n                props.sessionReducer.removeUserInfo();\r\n            });\r\n        }\r\n    }, [location]);\r\n\r\n    const classNames = useMemo(() => {\r\n        if (history.action === 'PUSH') {\r\n            return \"forward\";\r\n        }else if (history.action === 'POP') {\r\n            return historyStack.historyStack.checkDirection(location.key);\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    useEffect(() => {\r\n        if(classNames === \"forward\" && history.action === 'PUSH'){\r\n            historyStack.historyStack.push(location.key);\r\n        }else if(classNames === \"forward\"){\r\n            return historyStack.historyStack.forward();\r\n        }else{\r\n            return historyStack.historyStack.backward();\r\n        }\r\n    }, [location.pathname, classNames]);\r\n\r\n    return (\r\n        <TransitionGroup>\r\n            <CSSTransition key={`${location.pathname}${location.key}`} timeout={1000} classNames={classNames}>\r\n                <div>\r\n                    <Suspense fallback={<div className=\"enter-done\">Loading...</div>}>\r\n                        <Switch location={location}>\r\n                            <Route exact \r\n                                path={`${process.env.PUBLIC_URL}/`}\r\n                                render={(renderProp) => (\r\n                                    <MainContainer {...{\r\n                                        ...props,\r\n                                        ...renderProp\r\n                                    }}></MainContainer>\r\n                                )}\r\n                            />\r\n                            <Route \r\n                                path={`${process.env.PUBLIC_URL}/login`}\r\n                                render={(renderProp) => (\r\n                                    <LoginContainer {...{\r\n                                        ...props,\r\n                                        ...renderProp\r\n                                    }}></LoginContainer>\r\n                                )}\r\n                            />\r\n                            <SessionRoute \r\n                                login={props.login}\r\n                                path={`${process.env.PUBLIC_URL}/menu1`}\r\n                                render={(renderProp) => (\r\n                                    <Menu1 {...{\r\n                                        ...props,\r\n                                        ...renderProp\r\n                                    }}></Menu1>\r\n                                )}\r\n                            />\r\n                            <SessionRoute \r\n                                login={props.login}\r\n                                path={`${process.env.PUBLIC_URL}/menu2`}\r\n                                render={(renderProp) => (\r\n                                    <Menu2 {...{\r\n                                        ...props,\r\n                                        ...renderProp\r\n                                    }}></Menu2>\r\n                                )}\r\n                            />\r\n                            <SessionRoute \r\n                                login={props.login}\r\n                                path={`${process.env.PUBLIC_URL}/menu3`}\r\n                                render={(renderProp) => (\r\n                                    <MapContainer {...{\r\n                                        ...props,\r\n                                        ...renderProp\r\n                                    }}></MapContainer>\r\n                                )}\r\n                            />\r\n                        </Switch>\r\n                    </Suspense>\r\n                </div>\r\n            </CSSTransition>\r\n        </TransitionGroup>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ session }) => ({\r\n    userInfo: session.userInfo\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    sessionReducer: bindActionCreators(sessionModules, dispatch)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PageList);","C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\session.js",["196"],"import { createAction, handleActions } from 'redux-actions';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nconst SET_USER_INFO = 'session/SET_USER_INFO';\r\nconst REMOVE_USER_INFO = 'session/REMOVE_USER_INFO';\r\n\r\nexport const setUserInfo = createAction(SET_USER_INFO);\r\nexport const removeUserInfo = createAction(REMOVE_USER_INFO);\r\n\r\nconst initialState = {\r\n    login: false,\r\n    userInfo : {\r\n        userId : \"\"\r\n    }\r\n}\r\n\r\nexport default handleActions({\r\n    [SET_USER_INFO]: (state, action) => (\r\n        {\r\n            ...state, \r\n            login : true, \r\n            userInfo : action.payload\r\n        }\r\n    ),\r\n    [REMOVE_USER_INFO]: (state, action) => (\r\n        {\r\n            ...state, \r\n            login : false, \r\n            userInfo : {\r\n                userId : \"\"\r\n            }\r\n        }\r\n    )\r\n}, initialState);","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\Footer.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\Header.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\common\\mapComponent.js",["197"],"import { createAction, handleActions } from 'redux-actions';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport { MapType, MapAction } from 'common/component/MapComponent'\r\n\r\nconst SET_MAP_TYPE = 'MAP/SET_MAP_TYPE';\r\nconst SET_MAP_ACTION = 'MAP/SET_MAP_ACTION';\r\nconst SET_MAP_OBJECT = 'MAP/SET_MAP_OBJECT';\r\nconst INT_MAP = 'MAP/INT_MAP';\r\n\r\nexport const setMapType = createAction(SET_MAP_TYPE);\r\nexport const setMapAction = createAction(SET_MAP_ACTION);\r\nexport const setMapObject = createAction(SET_MAP_OBJECT);\r\nexport const intMap = createAction(INT_MAP);\r\n\r\nconst initialState = {\r\n    mapType : MapType.NORMAL_MAP,\r\n    mapActionMode : MapAction.NORMAL,\r\n    mapObject : null,\r\n}\r\n\r\nexport default handleActions({\r\n    [SET_MAP_TYPE]: (state, action) => (\r\n        {\r\n            ...state, \r\n            mapType : action.payload\r\n        }\r\n    ), \r\n    [SET_MAP_ACTION]: (state, action) => (\r\n        {\r\n            ...state, \r\n            mapActionMode : action.payload\r\n        }\r\n    ), \r\n    [SET_MAP_OBJECT]: (state, action) => (\r\n        {\r\n            ...state, \r\n            mapObject : action.payload\r\n        }\r\n    ),\r\n    [INT_MAP]: (state, action) => (\r\n        {\r\n            ...initialState\r\n        }\r\n    ),\r\n}, initialState);","C:\\data\\workspace\\2021\\me-client\\src\\store\\modules\\common\\overlyaManagerComponent.js",["198"],"import { createAction, handleActions } from 'redux-actions';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nconst SET_OVERLAY_LIST = 'OVERLYA_MANAGER/SET_OVERLAY_LIST';\r\n\r\nexport const setOverlayList = createAction(SET_OVERLAY_LIST);\r\n\r\nconst initialState = {\r\n    overlayList : null,\r\n}\r\n\r\nexport default handleActions({\r\n    [SET_OVERLAY_LIST]: (state, action) => (\r\n        {\r\n            ...state, \r\n            overlayList : action.payload\r\n        }\r\n    )\r\n}, initialState);","C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\History.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\Menu2.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\LoginContainer.js",["199","200","201"],"import React, { useState, useMemo } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nimport pbkdf2 from 'pbkdf2';\r\n\r\nimport * as mainService from '../service/MainService';\r\n\r\nimport * as sessionModule from 'store/modules/session';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { useAlert } from 'react-alert';\r\n\r\nimport withModalPopup from 'common/component/withModalPopup';\r\n\r\nimport TestPopup from '../component/TestPopup'\r\n\r\nimport { StorageHelper } from 'common';\r\nconst LoginContainer = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const [state, setState] = useState({\r\n        id : \"\",\r\n        pwd : \"\",\r\n        popupShow : false\r\n    });\r\n\r\n    const valueChangeHandler = (type) => {\r\n        return (e) => {\r\n            const value = e.target.value;\r\n\r\n            if(type === \"id\"){\r\n                setState((state) => ({\r\n                    ...state,\r\n                    id : value\r\n                }));\r\n            }else{\r\n                setState((state) => ({\r\n                    ...state,\r\n                    pwd : value\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    const doLogin = () => {\r\n        if(state.id === \"\"){\r\n            alert.show(\"아이디를 입력하여주십시오.\");\r\n\r\n            return;\r\n        }else if(state.pwd === \"\"){\r\n            alert.show(\"비밀번호를 입력하여주십시오.\");\r\n\r\n            return;\r\n        }\r\n\r\n        mainService.getSalt(state.id)\r\n        .then(response => {\r\n            const salt = response.data.data;\r\n\r\n            const hashPwArray = pbkdf2.pbkdf2Sync(state.pwd, salt, 1, 32, 'sha512');\r\n            const hashPw = hashPwArray.toString('base64');\r\n\r\n            return mainService.login({\r\n                id : state.id,\r\n                pw : hashPw\r\n            });\r\n        })\r\n        .then(response => {\r\n            const userInfo = response.data.mapData.userInfo;\r\n\r\n            const removeSaveIdInfo = () => {\r\n                if(StorageHelper.get(\"savedId\") !== null){\r\n                    StorageHelper.removeByKey(\"savedId\");\r\n                }\r\n            }\r\n\r\n            removeSaveIdInfo();\r\n\r\n            StorageHelper.set(\"savedId\", {\r\n                id : state.id,\r\n                checked : true\r\n            });\r\n\r\n            props.sessionReducer.setUserInfo({\r\n                id : userInfo.id\r\n            });\r\n\r\n            props.history.push(`${process.env.PUBLIC_URL}/`);\r\n        })\r\n        .catch(e => {\r\n            if(e.response !== undefined){\r\n                alert.show(e.response.data.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TestPopup\r\n                {\r\n                    ...{\r\n                    keyData : \"popup1\",\r\n                    buttons : [\r\n                        {\r\n                            buttonName : \"헐\",\r\n                            buttonStyle : \"primary\",\r\n                            clickHandler : () => { alert.show(\"헐\")}\r\n                        },\r\n                        {\r\n                            buttonName : \"허헐\",\r\n                            buttonStyle : \"danger\",\r\n                            clickHandler : () => { alert.show(\"허헐\")}\r\n                        }\r\n                    ],\r\n                    title : \"hoc popup\",\r\n                    show : state.popupShow,\r\n                    keyboard : false,\r\n                    backdrop : 'static',\r\n                    closeHandler : () => {\r\n                        setState(state => ({\r\n                            ...state,\r\n                            popupShow : false\r\n                        }))\r\n                    }\r\n                }\r\n            }\r\n            ></TestPopup>\r\n            <div>로그인</div>\r\n            <div>\r\n                <div>\r\n                    <input type=\"text\" id=\"id\" value={state.id} onChange={valueChangeHandler(\"id\")} />\r\n                </div>\r\n                <div>\r\n                    <input type=\"password\" id=\"pwd\" value={state.pwd} onChange={valueChangeHandler(\"pwd\")} />\r\n                </div>\r\n                <div>\r\n                    <Button varian=\"primary\" onClick={doLogin}>로그인</Button>\r\n                    <Button varian=\"primary\" onClick={() => {\r\n                        setState(state => ({\r\n                            ...state,\r\n                            popupShow : true\r\n                        }))\r\n                    }}>팝업</Button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({session}) => ({\r\n    login : session.login,\r\n    userInfo : session.userInfo\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    sessionReducer : bindActionCreators(sessionModule, dispatch)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoginContainer);","C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\Menu1.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\MapContainer.js",["202","203","204","205"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport MapComponent, { MapType } from 'common/component/MapComponent';\r\nimport OverlayManagerComponent from 'common/component/OverlayManagerComponent';\r\nimport OverLayComponent from 'common/component/OverLayComponent';\r\n\r\nimport * as mapComponentModule from 'store/modules/common/mapComponent';\r\nimport * as overlyaManagerModule from 'store/modules/common/overlyaManagerComponent';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport useInterval from 'react-useinterval';\r\n\r\nimport * as data1 from 'data';\r\nimport * as data2 from 'data1';\r\n\r\nconst MapContainer = (props) => {\r\n    const [data, setData] = useState(JSON.parse(data1.getData()).data);\r\n\r\n    useEffect(() => {\r\n        props.mapComponentReducer.intMap();\r\n    }, []);\r\n\r\n    /**\r\n     * 데이터를 바꾸는 테스트 코드\r\n     */\r\n    useInterval(() => {\r\n        const map = props.mapObject ?? false;\r\n\r\n        if(map !== false){\r\n            const rnd = Math.random();\r\n            const datas = [JSON.parse(data1.getData()).data, JSON.parse(data2.getData()).data];\r\n    \r\n            setData(data => (\r\n                rnd >= 0.5 ? datas[0] : datas[1]\r\n            ));\r\n        }\r\n    }, 1000);\r\n\r\n    useEffect(() => {\r\n        const map = props.mapObject ?? false;\r\n        if(map !== false){\r\n            console.log(props.mapObject)\r\n        }\r\n\r\n        setTimeout(() => {\r\n            // changeMapType(MapType.SATELLITE_MAP);\r\n        }, 1000);\r\n    }, [props.mapObject]);\r\n\r\n    const changeMapType = async (type) => {\r\n        props.mapComponentReducer.setMapType(type);\r\n    }\r\n\r\n    return (\r\n        <div style={\r\n            {\r\n                width : \"100%\",\r\n                height : \"900px\"\r\n            }\r\n        }>\r\n            <OverlayManagerComponent {\r\n                ...{\r\n                    ...props,\r\n                    data : data, //overlay를 그리기위한 dateList\r\n                    OverLayComponent : OverLayComponent, //Overlay로 사용될 component\r\n                    idKey : \"deviceMeterId\", //오버레이를 그리기 위한 데이터에 unique한 데이터의 key\r\n                    xKey : \"deviceMeterPointX\", //x 좌표가 들어가 있는 데이터의 key 위경도값만 가능\r\n                    yKey : \"deviceMeterPointY\", //y 좌표가 들어가 있는 데이터의 key 위경도값만 가능,\r\n                    drawExtentMultiple : 1, //보이는 화면의 extent 기준으로 몇 배율을 영역을 그릴지에 대한 값 기본값 1\r\n                    minZoom : 13, //overlay를 표출할 최소 줌레벨 기본값 1\r\n                    maxZoom : 20, //overlay를 표출할 최대 줌레벨 기본값 20\r\n                }\r\n            }></OverlayManagerComponent>\r\n        </div>\r\n    )\r\n}\r\n\r\n// export default MapContainer;\r\nconst mapStateToProps = ({mapComponent}) => ({\r\n    mapType : mapComponent.mapType,\r\n    mapActionMode : mapComponent.mapActionMode,\r\n    mapObject : mapComponent.mapObject,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    mapComponentReducer : bindActionCreators(mapComponentModule, dispatch),\r\n    overlyaManagerReducer : bindActionCreators(overlyaManagerModule, dispatch),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MapContainer);","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\MapComponent.js",["206","207","208","209","210"],"import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport {getArea, getLength} from 'ol/sphere';\r\nimport {Circle as CircleStyle, Fill, Stroke, Style} from 'ol/style';\r\nimport Overlay from 'ol/Overlay';\r\nimport {unByKey} from 'ol/Observable';\r\n\r\n// import dataInfo from 'img/data_info.png';\r\n\r\nimport {Tile  as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport {XYZ, Vector as VectorSource, TileWMS} from 'ol/source';\r\nimport * as olProj from 'ol/proj';\r\nimport {LineString, Polygon} from 'ol/geom';\r\n\r\n// import { MapActionProvider } from 'components';\r\n\r\nimport MapConpoment from './scss/MapConpoment.module.scss';\r\n\r\nimport * as mapComponentModule from 'store/modules/common/mapComponent';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport 'ol/ol.css';\r\n\r\n\r\nclass MapComponent extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.map = null;\r\n        this.helpTooltipElement = null;\r\n        this.measureTooltipElement = null;\r\n        this.measureTooltip = null;\r\n        this.vectorSource = null;\r\n        this.continuePolygonMsg = '지도를 클릭하시면 측정이 시작됩니다.';\r\n        this.continueLineMsg = '더블클릭 시 측정이 종료됩니다.';\r\n        this.draw = null;\r\n        this.monseOverListener = null;\r\n        this.pointMoveListener = null;\r\n        this.drawstartListener = null;\r\n        this.drawendListener = null;\r\n\r\n        this.baseMaps = {};\r\n\r\n        \r\n        this.mapRef = null;\r\n        this.setMapRef = element => {\r\n            this.mapRef = element;\r\n        }\r\n\r\n        // this.changeMapObject = props.;\r\n\r\n        this.currentMapType = MapType.NORMAL_MAP;\r\n        this.currentToolState = \"move\";\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.vectorSource = new VectorSource();\r\n        let drawVector = new VectorLayer({\r\n            source: this.vectorSource,\r\n            style: new Style({\r\n                fill: new Fill({\r\n                    color: 'rgba(255, 255, 255, 0.2)'\r\n                }),\r\n                stroke: new Stroke({\r\n                    color: '#243aff',\r\n                    width: 2\r\n                }),\r\n                image: new CircleStyle({\r\n                    radius: 7,\r\n                    fill: new Fill({\r\n                        color: '#243aff'\r\n                    })\r\n                })\r\n            })\r\n        });\r\n\r\n        drawVector.setZIndex(99999);\r\n        \r\n        this.baseMaps[\"setelliteSource\"] = new TileLayer({\r\n            title: 'satellite',\r\n            visible: false,\r\n            source: new XYZ({\r\n                url: 'http://xdworld.vworld.kr:8080/2d/Satellite/service/{z}/{x}/{y}.jpeg',\r\n                crossOrigin: \"Anonymous\"\r\n            })\r\n        });\r\n\r\n        this.baseMaps[\"baseSource\"] = new TileLayer({\r\n            title: 'base',\r\n            visible: true,\r\n            source: new XYZ({\r\n                url: 'http://xdworld.vworld.kr:8080/2d/Base/service/{z}/{x}/{y}.png',\r\n                crossOrigin: \"Anonymous\"\r\n            })\r\n        });\r\n\r\n        this.map = new Map({\r\n            target: ReactDOM.findDOMNode(this.mapRef),\r\n            layers: [\r\n                this.baseMaps[\"setelliteSource\"],\r\n                this.baseMaps[\"baseSource\"],\r\n                drawVector\r\n            ],\r\n            view: new View({\r\n                center: olProj.fromLonLat([127.5, 36]),\r\n                // center: olProj.transform([127.100616,37.402142], 'EPSG:4326', 'EPSG:5186'),\r\n\r\n                zoom: 7,                                        // 초기화면 zoom level\r\n                minZoom: 6,                                        // 최소 zoom level\r\n                maxZoom: 19                                        // 최대 zoom level\r\n            })\r\n        });\r\n\r\n        setTimeout(() => {\r\n            const view = this.map.getView();\r\n            const duration = 1000;\r\n\r\n            view.animate({\r\n                center: olProj.fromLonLat([126.71141375883711, 37.48982797796613]),\r\n                duration: duration\r\n            });\r\n\r\n            view.animate({\r\n                zoom: 11,\r\n                duration: duration\r\n            }, () => {\r\n                // this.selectDeviceList();\r\n            });\r\n\r\n            this.props.mapComponentReducer.setMapObject(this.map);\r\n        }, 100);\r\n    }\r\n\r\n    getMap = () => {\r\n        return this.map;\r\n    }\r\n\r\n    //베이스맵 전환\r\n    changeBaseMap = (mapType) => {\r\n        if(this.map != null && this.currentMapType !== mapType){\r\n            const layers = this.map.getLayers().getArray();\r\n            const baseMap = layers.filter(layer => layer.get(\"title\") === 'base')[0];\r\n            const satelliteMap = layers.filter(layer => layer.get(\"title\") === 'satellite')[0];\r\n    \r\n            if(mapType === MapType.NORMAL_MAP){\r\n                baseMap.setVisible(true);\r\n                satelliteMap.setVisible(false);\r\n            }else{\r\n                baseMap.setVisible(false);\r\n                satelliteMap.setVisible(true);\r\n            }\r\n    \r\n            this.currentMapType = mapType;\r\n        }\r\n    }\r\n\r\n    //거리 표현 포메팅\r\n    formatLength(line){\r\n        var length = getLength(line);\r\n        var output;\r\n        if (length > 100) {\r\n            output = (Math.round(length / 1000 * 100) / 100) + ' km';\r\n        } else {\r\n            output = (Math.round(length * 100) / 100) + ' m';\r\n        }\r\n        return output;\r\n    };\r\n\r\n    //맵 거리 측정\r\n    meansureDistance(){\r\n        this.mapClear();\r\n\r\n        this.draw = new Draw({\r\n            source: this.vectorSource,\r\n            type: 'LineString',\r\n            style: new Style({\r\n                fill: new Fill({\r\n                    color: 'rgba(255, 255, 255, 0.2)'\r\n                }),\r\n                stroke: new Stroke({\r\n                    color: 'rgba(0, 0, 0, 0.5)',\r\n                    lineDash: [10, 10],\r\n                    width: 2\r\n                }),\r\n                image: new CircleStyle({\r\n                    radius: 5,\r\n                    stroke: new Stroke({\r\n                        color: 'rgba(0, 0, 0, 0.7)'\r\n                    }),\r\n                    fill: new Fill({\r\n                        color: 'rgba(255, 255, 255, 0.2)'\r\n                    })\r\n                })\r\n            })\r\n        });\r\n\r\n        this.map.addInteraction(this.draw);\r\n\r\n        //측정 툴팁 생성\r\n        let createMeasureTooltip = () => {\r\n            if (this.measureTooltipElement) {\r\n                this.measureTooltipElement.parentNode.removeChild(this.measureTooltipElement);\r\n            }\r\n            this.measureTooltipElement = document.createElement('div');\r\n            this.measureTooltipElement.className = `${MapConpoment['ol-tooltip']} ${MapConpoment['ol-tooltip-measure']}`;\r\n            this.measureTooltip = new Overlay({\r\n                element: this.measureTooltipElement,\r\n                offset: [0, -15],\r\n                positioning: 'bottom-center'\r\n            });\r\n            this.measureTooltip.set(\"type\", \"measureTooltip\");\r\n            this.map.addOverlay(this.measureTooltip);\r\n        };\r\n\r\n        //도움말 툴팁 생성\r\n        let createHelpTooltip = () => {\r\n            if (this.helpTooltipElement) {\r\n                this.helpTooltipElement.parentNode.removeChild(this.helpTooltipElement);\r\n            }\r\n            this.helpTooltipElement = document.createElement('div');\r\n            this.helpTooltipElement.className = `${MapConpoment['ol-tooltip']} ${MapConpoment.hidden}`;\r\n            this.helpTooltip = new Overlay({\r\n                element: this.helpTooltipElement,\r\n                offset: [15, 0],\r\n                positioning: 'center-left'\r\n            });\r\n            this.helpTooltip.set(\"type\", \"measureTooltip\");\r\n            this.map.addOverlay(this.helpTooltip);\r\n        };\r\n\r\n        createMeasureTooltip();\r\n        createHelpTooltip();\r\n\r\n        let listener;\r\n        this.drawstartListener = this.draw.on('drawstart',\r\n            (evt) => {\r\n                this.sketch = evt.feature;\r\n                var tooltipCoord = evt.coordinate;\r\n\r\n                listener = this.sketch.getGeometry().on('change', (evt) => {\r\n                    var geom = evt.target;\r\n                    var output;\r\n                    if (geom instanceof Polygon) {\r\n                        output = this.formatArea(geom);\r\n                        tooltipCoord = geom.getInteriorPoint().getCoordinates();\r\n                    } else if (geom instanceof LineString) {\r\n                        output = this.formatLength(geom);\r\n                        tooltipCoord = geom.getLastCoordinate();\r\n                    }\r\n                    this.measureTooltipElement.innerHTML = output;\r\n                    this.measureTooltip.setPosition(tooltipCoord);\r\n                });\r\n            }\r\n        );\r\n\r\n        this.drawendListener = this.draw.on('drawend',\r\n            () => {\r\n                this.measureTooltipElement.className = `${MapConpoment['ol-tooltip']} ${MapConpoment['ol-tooltip-static']}`;\r\n                this.measureTooltip.setOffset([0, -7]);\r\n                // unset sketch\r\n                this.sketch = null;\r\n\r\n                if(this.props.drawEndCallback != undefined){\r\n                    const distanceInfo = this.measureTooltipElement.innerHTML.split(' ');\r\n                    let distance = 0;\r\n\r\n                    if(distanceInfo[1] === \"km\"){\r\n                        distance = parseFloat(distanceInfo[0]) * 1000;\r\n                    }else if(distanceInfo[1] === \"m\"){\r\n                        distance = parseFloat(distanceInfo[0]);\r\n                    }\r\n\r\n                    this.props.drawEndCallback(distance);\r\n                }\r\n\r\n                // unset tooltip so that a new one can be created\r\n                this.measureTooltipElement = null;\r\n                createMeasureTooltip();\r\n                unByKey(listener);\r\n            }\r\n        );\r\n        \r\n        this.monseOverListener = this.map.on('pointermove', (evt) => {\r\n            if (evt.dragging) {\r\n                return;\r\n            }\r\n            var helpMsg = '지도를 클릭하시면 측정이 시작됩니다.';\r\n    \r\n            if (this.sketch) {\r\n                var geom = this.sketch.getGeometry();\r\n                if (geom instanceof Polygon) {\r\n                    helpMsg = this.continuePolygonMsg;\r\n                } else if (geom instanceof LineString) {\r\n                    helpMsg = this.continueLineMsg;\r\n                }\r\n            }\r\n    \r\n            this.helpTooltipElement.innerHTML = helpMsg;\r\n            this.helpTooltip.setPosition(evt.coordinate);\r\n    \r\n            this.helpTooltipElement.classList.remove('hidden');\r\n        });\r\n\r\n        this.pointMoveListener = this.map.getViewport().addEventListener('mouseout', () => {\r\n            this.helpTooltipElement.classList.add('hidden');\r\n        });\r\n    }\r\n\r\n    //지도 초기화\r\n    mapClear = () => {\r\n        this.vectorSource.clear();\r\n\r\n        if(this.helpTooltipElement != null){\r\n            this.helpTooltipElement.classList.remove('hidden');\r\n        }\r\n\r\n        let tooltipOverlays = this.map.getOverlays().getArray().filter(overlay => {\r\n            if(overlay.get(\"type\") === 'measureTooltip'){\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        for(let a = 0; a < tooltipOverlays.length; a++) {\r\n            this.map.removeOverlay(tooltipOverlays[a]);\r\n        }\r\n\r\n        this.mapDrawStop();\r\n    }\r\n\r\n    mapDrawStop = () => {\r\n        if(this.draw != null){\r\n            this.map.removeInteraction(this.draw);\r\n            this.draw = null;\r\n        }\r\n\r\n        unByKey(this.monseOverListener);\r\n        unByKey(this.pointMoveListener);\r\n        unByKey(this.pointMoveListener);\r\n        unByKey(this.drawstartListener);\r\n        unByKey(this.drawendListener);\r\n    }\r\n\r\n    activeMapTool = (mapToolsState) => {\r\n        // const activeTool = Object.entries(mapToolsState).filter(item => item[1] === true)[0];\r\n        \r\n        // if(this.currentToolState !== mapToolsState){\r\n        //     this.currentToolState = mapToolsState;\r\n\r\n        //     if(activeTool[0] === \"meansureDistance\"){\r\n        //         this.meansureDistance();\r\n        //     }else if(activeTool[0] === \"mapClear\"){\r\n        //         this.mapClear();\r\n        //     }else{\r\n        //         this.mapDrawStop();\r\n        //     }\r\n        // }\r\n\r\n        if(MapAction.MEASURE_DISTANCE){\r\n            this.meansureDistance();\r\n        }else if(MapAction.MAP_CLEAR){\r\n            this.mapClear();\r\n        }else{\r\n            this.mapDrawStop();\r\n        }\r\n    }\r\n\r\n    getMapImage = (callback) => {\r\n        this.map.once('rendercomplete', () => {\r\n            var mapCanvas = document.createElement('canvas');\r\n            var size = this.map.getSize();\r\n            mapCanvas.width = size[0];\r\n            mapCanvas.height = size[1];\r\n            var mapContext = mapCanvas.getContext('2d');\r\n            Array.prototype.forEach.call(document.querySelectorAll('.ol-layer canvas'), function (canvas) {\r\n                if (canvas.width > 0) {\r\n                    var opacity = canvas.parentNode.style.opacity;\r\n                    mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\r\n                    var transform = canvas.style.transform;\r\n                    // Get the transform parameters from the style's transform matrix\r\n                    var matrix = transform.match(/^matrix\\(([^\\(]*)\\)$/)[1].split(',').map(Number);\r\n                    // Apply the transform to the export map context\r\n                    CanvasRenderingContext2D.prototype.setTransform.apply(mapContext, matrix);\r\n                    mapContext.drawImage(canvas, 0, 0);\r\n                }\r\n            });\r\n            \r\n            callback(mapCanvas.toDataURL());\r\n        });\r\n\r\n        this.map.renderSync();\r\n    }\r\n\r\n    render() {\r\n        const gisStyle = {height : '100%'};\r\n        this.changeBaseMap(this.props.mapType);\r\n\r\n        return (\r\n            <div id='gis' ref={this.setMapRef} style={gisStyle}></div>\r\n            // <MapActionProvider.MapConsumer>\r\n            //     {\r\n            //         ({ mapType }) => {\r\n            //             this.changeBaseMap(mapType);\r\n\r\n            //             return (\r\n            //                 <MapActionProvider.MapObjectConsumer>\r\n            //                     {\r\n            //                         ({mapObjectAction}) => {\r\n            //                             this.changeMapObject = mapObjectAction.setMap;\r\n\r\n            //                             return (\r\n            //                                 <MapActionProvider.MapToolsConsumer>\r\n            //                                     {\r\n            //                                         ({mapToolsState}) => {\r\n            //                                             this.activeMapTool(mapToolsState);\r\n                                                        \r\n            //                                             return (\r\n            //                                                 <div id='gis' ref={this.setMapRef} style={gisStyle}></div>\r\n            //                                             );\r\n            //                                         }\r\n            //                                     }\r\n            //                                 </MapActionProvider.MapToolsConsumer>\r\n            //                             )\r\n            //                         }\r\n            //                     }\r\n            //                 </MapActionProvider.MapObjectConsumer>\r\n            //             );\r\n            //         }\r\n            //     }\r\n            // </MapActionProvider.MapConsumer>\r\n        )\r\n    }\r\n};\r\n\r\n// export default MapComponent;\r\n\r\nexport const MapType = {\r\n    NORMAL_MAP : 'nomalMap',\r\n    SATELLITE_MAP : 'satelliteMap'\r\n};\r\n\r\nexport const MapAction = {\r\n    NORMAL : 'normal',\r\n    MEASURE_DISTANCE : 'measure_distance',\r\n    MAP_CLEAR : 'map_clear'\r\n};\r\n\r\nconst mapStateToProps = ({mapComponent}) => ({\r\n    mapType : mapComponent.mapType,\r\n    mapActionMode : mapComponent.mapActionMode,\r\n    mapObject : mapComponent.mapObject,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    mapComponentReducer : bindActionCreators(mapComponentModule, dispatch)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MapComponent);","C:\\data\\workspace\\2021\\me-client\\src\\common\\index.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\main\\index.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\Stack.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\main\\component\\TestPopup.js",["211"],"import React from 'react';\r\n\r\nimport withModalPopup from 'common/component/withModalPopup';\r\n\r\nconst TestPopup = (props) => {\r\n    return (\r\n        <React.Fragment>팝업이다</React.Fragment>\r\n    )\r\n}\r\n\r\nexport default (props) => {\r\n    return withModalPopup(props)(TestPopup);\r\n};","C:\\data\\workspace\\2021\\me-client\\src\\main\\service\\MainService.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\StorageHelper.js",["212"],"export default {\r\n    set: (key, value) => {\r\n        if (!localStorage) throw new Error(\"로컬 저장소를 사용할수 없습니다.\");\r\n\r\n        if (Object.entries(localStorage).findIndex(storageKey => storageKey === key) !== -1) throw new Error(\"이미 저장되어있는 키입니다.\");\r\n\r\n        localStorage[key] = (typeof value) === 'string' ? value : JSON.stringify(value);\r\n    },\r\n    get: (key) => {\r\n        if (!localStorage) throw new Error(\"로컬 저장소를 사용할수 없습니다.\");\r\n\r\n        if (!localStorage[key]) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            /**\r\n             * string 값으로 저장 되어 있기 때문에 일단 객체화를 수행해보고 오류가 발생한다면 \r\n             * 일반 String으로 판단하고 return 한다\r\n             */\r\n            const parsed = JSON.parse(localStorage[key]);\r\n\r\n            return parsed;\r\n        } catch (e) {\r\n            return localStorage[key];\r\n        }\r\n    },\r\n    removeByKey: (key) => {\r\n        if (!localStorage) throw new Error(\"로컬 저장소를 사용할수 없습니다.\");\r\n\r\n        if (localStorage[key]) {\r\n            localStorage.removeItem(key);\r\n        }\r\n    },\r\n    removeByValue: (value) => {\r\n        if (!localStorage) throw new Error(\"로컬 저장소를 사용할수 없습니다.\");\r\n\r\n        Object.entries(localStorage).filter(key => {\r\n            if(localStorage[key] === value){\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }).map().forEach(key => {\r\n            localStorage.removeItem(key);\r\n        });\r\n    }\r\n};","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\SessionRoute.js",["213"],"import React, { useEffect } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAlert } from 'react-alert';\r\n\r\nconst SessionRoute = (props) => {\r\n    // const { render, login, path } = props;\r\n    const { login, render } = props;\r\n    const alert = useAlert();\r\n\r\n    useEffect(() => {\r\n        if (!login) {\r\n            alert.show(\"세션이 만료되었습니다.\");\r\n        }\r\n    }, [login])\r\n\r\n    if (login) {\r\n        return (\r\n            <Route\r\n                path={`${process.env.PUBLIC_URL}/${props.path}`}\r\n                {...props}\r\n                render={(props) =>\r\n                    render(props)\r\n                }\r\n            />\r\n        );\r\n    }else{\r\n        return (\r\n            <Redirect\r\n                to={{ pathname: `${process.env.PUBLIC_URL}/login`, state: { from: props.location } }}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default SessionRoute","C:\\data\\workspace\\2021\\me-client\\src\\common\\service\\CommonService.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\main\\container\\MainContainer.js",["214"],"import React, { useMemo } from 'react';\r\n\r\nimport * as sessionModule from 'store/modules/session';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nconst MainContainer = (props) => {\r\n    const button = useMemo(() => {\r\n      console.log(props);\r\n        if(props.login){\r\n            return (\r\n                <label onClick={() => {\r\n                    props.sessionReducer.removeUserInfo();\r\n                }}>로그아웃</label>\r\n            )\r\n        }else{\r\n            return (\r\n                <label onClick={() => {\r\n                    props.history.push(`${process.env.PUBLIC_URL}/login`)\r\n                }}>로그인</label>\r\n            )\r\n        }\r\n    }, [props.login])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            메인화면\r\n            {button}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({session}) => ({\r\n    login : session.login,\r\n    userInfo : session.userInfo\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    sessionReducer : bindActionCreators(sessionModule, dispatch)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainContainer);\r\n","C:\\data\\workspace\\2021\\me-client\\src\\data1.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\data.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\OverLayComponent.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\OverlayManagerComponent.js",["215","216","217","218","219","220","221","222","223","224","225","226"],"import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport MapComponent, { MapType } from 'common/component/MapComponent';\r\nimport wrapParamComponent from './wrapParamComponent';\r\nimport usePrevious from 'common/util/usePrevious';\r\n\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport Overlay from 'ol/Overlay';\r\nimport * as olProj from 'ol/proj';\r\nimport {fromExtent} from 'ol/geom/Polygon';\r\nimport GeometryLayout from 'ol/geom/GeometryLayout';\r\n\r\nimport * as mapComponentModule from 'store/modules/common/mapComponent';\r\nimport { connect } from 'react-redux';\r\n// import { bindActionCreators } from 'redux';\r\n\r\nconst OverlayManagerComponent = (props) => {\r\n    const overlayContainerRef = useRef();\r\n    const [overlays, setOverlays] = useState([]);\r\n    const [dataState, setDataState] = useState([]);\r\n\r\n    const { \r\n        data, //overlay를 그리기위한 dateList\r\n        idKey, //오버레이를 그리기 위한 데이터에 unique한 데이터의 key\r\n        xKey, //x 좌표가 들어가 있는 데이터의 key 위경도값만 가능\r\n        yKey,  //y 좌표가 들어가 있는 데이터의 key 위경도값만 가능\r\n        drawExtentMultiple = 1, //보이는 화면의 extent 기준으로 몇 배율을 영역을 그릴지에 대한 값 기본값 1\r\n        minZoom = 1,  //overlay를 표출할 최소 줌레벨 기본값 1\r\n        maxZoom = 20, //overlay를 표출할 최대 줌레벨 기본값 20\r\n    } = props;\r\n\r\n    const prevData = usePrevious(data);\r\n\r\n    /**\r\n     * 값이 바뀌지 않았을 때는 render 하지 않는다.\r\n     */\r\n    useEffect(() => {\r\n        if(!isEqual(prevData, data)){\r\n            setDataState(dataState => (data));\r\n        }\r\n    }, [data]);\r\n\r\n    /**\r\n     * 데이터를 기준으로 overlay로 사용할 컴포넌트 생성\r\n     */\r\n    useEffect(() => {\r\n        const mapObject = props.mapObject ?? false;\r\n\r\n        if(mapObject !== false){\r\n            update();\r\n\r\n            let index  = 0;\r\n            const overlayList = data.map(item => {\r\n                const itemTmp = {\r\n                    ...item,\r\n                    dataKey : item[idKey]\r\n                }\r\n\r\n                const OverlayComponent = wrapParamComponent(props.OverLayComponent);\r\n                return (\r\n                    <OverlayComponent key={item[idKey]} {...itemTmp}></OverlayComponent>\r\n                )\r\n            });\r\n\r\n            setOverlays(overlays => (overlayList));\r\n\r\n            const moveEnt = mapObject.on(\"moveend\", () => {\r\n                update();\r\n                draw();\r\n            });\r\n    \r\n            return () => {\r\n                mapObject.un(\"moveend\", moveEnt);\r\n            }\r\n        }\r\n    }, [props.mapObject, dataState]);\r\n\r\n    /**\r\n     * 최대 최소 zoom level과 화면 표출 범위를 체크\r\n     */\r\n    const checkDrawEnable = useCallback((polygon, dataItem, mapObject) => {\r\n        if(\r\n            polygon.intersectsCoordinate(\r\n                olProj.fromLonLat([dataItem[xKey], dataItem[yKey]])\r\n            ) &&\r\n            (\r\n                mapObject.getView().getZoom() >= minZoom &&\r\n                mapObject.getView().getZoom() <= maxZoom\r\n            )\r\n        ) {\r\n            //화면에 그려야 할 경우\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }, [props.mapObject]);\r\n\r\n    /**\r\n     * overlay를 redraw\r\n     */\r\n    const update = useCallback(() => {\r\n        const mapObject = props.mapObject ?? false;\r\n        \r\n        if(mapObject !== false){\r\n            let polygon = fromExtent(mapObject.getView().calculateExtent());\r\n\r\n            if(drawExtentMultiple !== 1){\r\n                polygon = calculateExtent(polygon);\r\n            }\r\n\r\n            //표출되어있는 모든 overlay의 element를 뽑아서 원위치\r\n            mapObject.getOverlays().getArray().filter(overlay => overlay.get(\"overlayType\") === \"deviceMeter\")\r\n            .forEach(overlay => {\r\n                const element = overlay.element.children[0] ?? false;\r\n                const refElement = overlayContainerRef.current ?? false;\r\n                \r\n                if(element !== false && refElement !== false){\r\n                    const cloneElement = element.cloneNode(true);\r\n\r\n                    ReactDOM.findDOMNode(refElement).appendChild(element);\r\n                    overlay.setElement(cloneElement);\r\n                }\r\n            });\r\n        }\r\n    }, [props.mapObject, overlays]);\r\n\r\n    const draw = useCallback(() => {\r\n        const mapObject = props.mapObject ?? false;\r\n\r\n        if(mapObject !== false){\r\n            let polygon = fromExtent(mapObject.getView().calculateExtent());\r\n\r\n            if(drawExtentMultiple !== 1){\r\n                polygon = calculateExtent(polygon);\r\n            }\r\n\r\n            //표출 기준에 부합되는 데이터를 추출\r\n            const mustDrawData = data.filter(dataItem => {\r\n                if(checkDrawEnable(polygon, dataItem, mapObject)) {\r\n                    //화면에 그려야 할 경우\r\n                    return dataItem;\r\n                }\r\n            });\r\n\r\n            //표출 기준에 부합되는 데이터중 이미 그려져 있는 overlay에서 삭제되야할 대상을 선정\r\n            const willDeleteOverlay = mapObject.getOverlays().getArray().filter(overlay => {\r\n                if(overlay.get(\"overlayType\") === \"deviceMeter\"){\r\n                    //이미 그려져 있는 overlay중 overlayType이 deviceMeter인 overlay를 추출\r\n                    const filteredData = mustDrawData.filter(dataItem => dataItem[idKey] === overlay.get(\"deviceMeterId\"));\r\n                    //그려야할 리스트에서 기존에 그려져있는 overlay아이디로 검색이 안될 경우 삭제 대상이므로 return true\r\n                    return filteredData.length === 0 ? true : false;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            //삭제되어야할 오버레이 삭제\r\n            willDeleteOverlay.forEach(deleteOverlay => {\r\n                mapObject.removeOverlay(deleteOverlay)\r\n            });\r\n\r\n            const addedOverlays = mapObject.getOverlays().getArray();\r\n            \r\n            mustDrawData.forEach(dataItem => {\r\n                const filteredOverlay = addedOverlays.filter(overlay => overlay.get(idKey).toString() === dataItem[idKey].toString());\r\n                const overlayElementHtmlNode = Array.from(overlayContainerRef.current.children).filter(element => {\r\n                    return element.dataset.key === dataItem[idKey].toString();\r\n                });\r\n\r\n                if(filteredOverlay.length > 0){\r\n                    //이미 있는 overlay일 시 element만 추가\r\n                    filteredOverlay[0].setElement(overlayElementHtmlNode[0]);\r\n                }else{\r\n                    //없을 시에는 overlay 생성 및 map에 add\r\n                    const overlay = new Overlay({\r\n                        id : dataItem[idKey],\r\n                        element: overlayElementHtmlNode[0],\r\n                        position : olProj.fromLonLat([dataItem[xKey], dataItem[yKey]]),\r\n                        positioning : \"top-center\"\r\n                    });\r\n                    overlay.set(\"overlayType\", \"deviceMeter\");\r\n                    overlay.set(\"deviceMeterId\", dataItem[idKey]);\r\n\r\n                    mapObject.addOverlay(overlay);\r\n                }\r\n            });\r\n        }\r\n    }, [props.mapObject, overlays]);\r\n\r\n    /**\r\n     * 생성된 overlay용 컴포넌트 목록이 변화 시 해당 컴포넌트 리스트를\r\n     * overlay로 변환 후 map에 add\r\n     */\r\n    useEffect(() => {\r\n        const mapObject = props.mapObject ?? false;\r\n\r\n        if(mapObject !== false && overlays.length > 0){\r\n            draw();\r\n        }\r\n    }, [props.mapObject, overlays]);\r\n\r\n    const calculateExtent = useCallback((polygon) => {\r\n        const coordinates = polygon.getCoordinates(true)[0];\r\n\r\n        const startX = coordinates[0][0];\r\n        const endX = coordinates[1][0];\r\n        const startY = coordinates[0][1];\r\n        const endY = coordinates[3][1];\r\n        const xLenthTmp = startX - endX;\r\n        const yLenthTmp = startY - endY;\r\n\r\n        const xLength = Math.sqrt(Math.pow(xLenthTmp, 2));\r\n        const yLength = Math.sqrt(Math.pow(yLenthTmp, 2));\r\n\r\n        if(xLenthTmp > 0){\r\n            coordinates[0][0] = coordinates[0][0] + (xLength / drawExtentMultiple);\r\n            coordinates[1][0] = coordinates[1][0] - (xLength / drawExtentMultiple);\r\n            coordinates[2][0] = coordinates[2][0] - (xLength / drawExtentMultiple);\r\n            coordinates[3][0] = coordinates[3][0] + (xLength / drawExtentMultiple);\r\n            coordinates[4][0] = coordinates[4][0] + (xLength / drawExtentMultiple);\r\n        }else{\r\n            coordinates[0][0] = coordinates[0][0] - (xLength / drawExtentMultiple);\r\n            coordinates[1][0] = coordinates[1][0] + (xLength / drawExtentMultiple);\r\n            coordinates[2][0] = coordinates[2][0] + (xLength / drawExtentMultiple);\r\n            coordinates[3][0] = coordinates[3][0] - (xLength / drawExtentMultiple);\r\n            coordinates[4][0] = coordinates[4][0] - (xLength / drawExtentMultiple);\r\n        }\r\n\r\n        if(yLenthTmp > 0){\r\n            coordinates[0][1] = coordinates[0][1] + (yLength / drawExtentMultiple);\r\n            coordinates[1][1] = coordinates[1][1] + (yLength / drawExtentMultiple);\r\n            coordinates[2][1] = coordinates[2][1] - (yLength / drawExtentMultiple);\r\n            coordinates[3][1] = coordinates[3][1] - (yLength / drawExtentMultiple);\r\n            coordinates[4][1] = coordinates[4][1] + (yLength / drawExtentMultiple);\r\n        }else{\r\n            coordinates[0][1] = coordinates[0][1] - (yLength / drawExtentMultiple);\r\n            coordinates[1][1] = coordinates[1][1] - (yLength / drawExtentMultiple);\r\n            coordinates[2][1] = coordinates[2][1] + (yLength / drawExtentMultiple);\r\n            coordinates[3][1] = coordinates[3][1] + (yLength / drawExtentMultiple);\r\n            coordinates[4][1] = coordinates[4][1] - (yLength / drawExtentMultiple);\r\n        }\r\n\r\n        const changePolygon = cloneDeep(polygon);\r\n\r\n        changePolygon.setCoordinates([coordinates], GeometryLayout.XY);\r\n\r\n        return changePolygon;\r\n    }, [props.mapObject, overlays]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MapComponent {...props}></MapComponent>\r\n            <div style={{display : \"none\"}} id='soiso' ref={overlayContainerRef}>\r\n                {overlays}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ({mapComponent}) => ({\r\n    mapObject : mapComponent.mapObject,\r\n});\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     mapComponentReducer : bindActionCreators(mapComponentModule, dispatch)\r\n// });\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    // mapDispatchToProps\r\n)(OverlayManagerComponent);","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\withModalPopup.js",["227"],"import React, { useMemo } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst withModalPopup = (props) => {\r\n    return Body => {\r\n        const buttons = useMemo(() => {\r\n            let index = 0;\r\n            return props.buttons.map(item => {\r\n                return (\r\n                    <Button key={index++} variant={item.buttonStyle} onClick={item.clickHandler}>\r\n                        {item.buttonName}\r\n                    </Button>\r\n                )\r\n            });\r\n        }, [props.buttons]);\r\n    \r\n        return (\r\n            <Modal \r\n                key={props.keyData}\r\n                show={props.show} \r\n                onHide={props.closeHandler}\r\n                keyboard={props.keyboard}\r\n                backdrop={props.backdrop}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{props.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Body {...props}></Body>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    {buttons}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withModalPopup;","C:\\data\\workspace\\2021\\me-client\\src\\common\\component\\wrapParamComponent.js",[],"C:\\data\\workspace\\2021\\me-client\\src\\common\\util\\usePrevious.js",[],["228","229"],"C:\\data\\workspace\\2021\\testProject\\frontend\\src\\index.js",["230"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport { Provider } from 'react-redux';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {ColorModeScript, ChakraProvider} from '@chakra-ui/react';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst customHistory = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <ColorModeScript initialColorMode=\"light\" />\r\n      <App customHistory={customHistory} />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nreportWebVitals();\r\n",["231","232"],"C:\\data\\workspace\\2021\\testProject\\frontend\\src\\App.js",["233"],"C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\container\\Menu2.js",[],"C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\container\\Menu1.js",[],"C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\container\\MainContainer.js",["234","235","236"],"C:\\data\\workspace\\2021\\testProject\\frontend\\src\\reportWebVitals.js",["237"],"import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","C:\\data\\workspace\\2021\\testProject\\frontend\\src\\common\\component\\Header.js",[],"C:\\data\\workspace\\2021\\testProject\\frontend\\src\\main\\service\\MainService.js",[],{"ruleId":"238","severity":1,"message":"239","line":8,"column":8,"nodeType":"240","messageId":"241","endLine":8,"endColumn":24},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"238","severity":1,"message":"246","line":21,"column":11,"nodeType":"240","messageId":"241","endLine":21,"endColumn":16},{"ruleId":"238","severity":1,"message":"247","line":1,"column":10,"nodeType":"240","messageId":"241","endLine":1,"endColumn":25},{"ruleId":"238","severity":1,"message":"248","line":10,"column":7,"nodeType":"240","messageId":"241","endLine":10,"endColumn":18},{"ruleId":"249","severity":1,"message":"250","line":15,"column":1,"nodeType":"251","endLine":15,"endColumn":37},{"ruleId":"238","severity":1,"message":"246","line":33,"column":11,"nodeType":"240","messageId":"241","endLine":33,"endColumn":16},{"ruleId":"238","severity":1,"message":"252","line":36,"column":26,"nodeType":"240","messageId":"241","endLine":36,"endColumn":41},{"ruleId":"253","severity":1,"message":"254","line":52,"column":8,"nodeType":"255","endLine":52,"endColumn":18,"suggestions":"256"},{"ruleId":"253","severity":1,"message":"257","line":60,"column":8,"nodeType":"255","endLine":60,"endColumn":27,"suggestions":"258"},{"ruleId":"253","severity":1,"message":"259","line":70,"column":8,"nodeType":"255","endLine":70,"endColumn":39,"suggestions":"260"},{"ruleId":"238","severity":1,"message":"261","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":22},{"ruleId":"238","severity":1,"message":"261","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":22},{"ruleId":"238","severity":1,"message":"261","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":22},{"ruleId":"238","severity":1,"message":"262","line":1,"column":27,"nodeType":"240","messageId":"241","endLine":1,"endColumn":34},{"ruleId":"238","severity":1,"message":"263","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":15},{"ruleId":"238","severity":1,"message":"264","line":14,"column":8,"nodeType":"240","messageId":"241","endLine":14,"endColumn":22},{"ruleId":"238","severity":1,"message":"265","line":3,"column":8,"nodeType":"240","messageId":"241","endLine":3,"endColumn":20},{"ruleId":"238","severity":1,"message":"266","line":3,"column":24,"nodeType":"240","messageId":"241","endLine":3,"endColumn":31},{"ruleId":"253","severity":1,"message":"267","line":22,"column":8,"nodeType":"255","endLine":22,"endColumn":10,"suggestions":"268"},{"ruleId":"238","severity":1,"message":"269","line":51,"column":11,"nodeType":"240","messageId":"241","endLine":51,"endColumn":24},{"ruleId":"238","severity":1,"message":"270","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":26},{"ruleId":"238","severity":1,"message":"271","line":6,"column":9,"nodeType":"240","messageId":"241","endLine":6,"endColumn":16},{"ruleId":"238","severity":1,"message":"272","line":14,"column":38,"nodeType":"240","messageId":"241","endLine":14,"endColumn":45},{"ruleId":"273","severity":1,"message":"274","line":267,"column":47,"nodeType":"275","messageId":"276","endLine":267,"endColumn":49},{"ruleId":"277","severity":1,"message":"278","line":386,"column":63,"nodeType":"279","messageId":"280","endLine":386,"endColumn":64,"suggestions":"281"},{"ruleId":"249","severity":1,"message":"282","line":11,"column":1,"nodeType":"251","endLine":13,"endColumn":3},{"ruleId":"249","severity":1,"message":"250","line":1,"column":1,"nodeType":"251","endLine":48,"endColumn":3},{"ruleId":"253","severity":1,"message":"283","line":14,"column":8,"nodeType":"255","endLine":14,"endColumn":15,"suggestions":"284"},{"ruleId":"253","severity":1,"message":"285","line":23,"column":8,"nodeType":"255","endLine":23,"endColumn":21,"suggestions":"286"},{"ruleId":"238","severity":1,"message":"266","line":4,"column":24,"nodeType":"240","messageId":"241","endLine":4,"endColumn":31},{"ruleId":"238","severity":1,"message":"287","line":16,"column":13,"nodeType":"240","messageId":"241","endLine":16,"endColumn":31},{"ruleId":"253","severity":1,"message":"288","line":44,"column":8,"nodeType":"255","endLine":44,"endColumn":14,"suggestions":"289"},{"ruleId":"238","severity":1,"message":"290","line":55,"column":17,"nodeType":"240","messageId":"241","endLine":55,"endColumn":22},{"ruleId":"253","severity":1,"message":"291","line":79,"column":8,"nodeType":"255","endLine":79,"endColumn":36,"suggestions":"292"},{"ruleId":"253","severity":1,"message":"293","line":99,"column":8,"nodeType":"255","endLine":99,"endColumn":25,"suggestions":"294"},{"ruleId":"238","severity":1,"message":"295","line":111,"column":43,"nodeType":"240","messageId":"241","endLine":111,"endColumn":50},{"ruleId":"253","severity":1,"message":"296","line":128,"column":8,"nodeType":"255","endLine":128,"endColumn":35,"suggestions":"297"},{"ruleId":"298","severity":1,"message":"299","line":141,"column":55,"nodeType":"300","messageId":"301","endLine":141,"endColumn":57},{"ruleId":"253","severity":1,"message":"302","line":191,"column":8,"nodeType":"255","endLine":191,"endColumn":35,"suggestions":"303"},{"ruleId":"253","severity":1,"message":"304","line":203,"column":8,"nodeType":"255","endLine":203,"endColumn":35,"suggestions":"305"},{"ruleId":"253","severity":1,"message":"306","line":251,"column":8,"nodeType":"255","endLine":251,"endColumn":35,"suggestions":"307"},{"ruleId":"253","severity":1,"message":"308","line":15,"column":12,"nodeType":"255","endLine":15,"endColumn":27,"suggestions":"309"},{"ruleId":"242","replacedBy":"310"},{"ruleId":"244","replacedBy":"311"},{"ruleId":"238","severity":1,"message":"312","line":4,"column":10,"nodeType":"240","messageId":"241","endLine":4,"endColumn":18},{"ruleId":"242","replacedBy":"313"},{"ruleId":"244","replacedBy":"314"},{"ruleId":"238","severity":1,"message":"315","line":13,"column":10,"nodeType":"240","messageId":"241","endLine":13,"endColumn":15},{"ruleId":"238","severity":1,"message":"316","line":1,"column":36,"nodeType":"240","messageId":"241","endLine":1,"endColumn":42},{"ruleId":"238","severity":1,"message":"317","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":14},{"ruleId":"238","severity":1,"message":"318","line":3,"column":10,"nodeType":"240","messageId":"241","endLine":3,"endColumn":16},{"ruleId":"238","severity":1,"message":"319","line":1,"column":10,"nodeType":"240","messageId":"241","endLine":1,"endColumn":23},"no-unused-vars","'AlertMUITemplate' is defined but never used.","Identifier","unusedVar","no-native-reassign",["320"],"no-negated-in-lhs",["321"],"'alert' is assigned a value but never used.","'applyMiddleware' is defined but never used.","'middlewares' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'setHistoryStack' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.login' and 'props.sessionReducer'. Either include them or remove the dependency array.","ArrayExpression",["322"],"React Hook useMemo has missing dependencies: 'history.action', 'historyStack.historyStack', and 'location.key'. Either include them or remove the dependency array.",["323"],"React Hook useEffect has missing dependencies: 'history.action', 'historyStack.historyStack', and 'location.key'. Either include them or remove the dependency array.",["324"],"'persistStore' is defined but never used.","'useMemo' is defined but never used.","'Modal' is defined but never used.","'withModalPopup' is defined but never used.","'MapComponent' is defined but never used.","'MapType' is defined but never used.","React Hook useEffect has a missing dependency: 'props.mapComponentReducer'. Either include it or remove the dependency array.",["325"],"'changeMapType' is assigned a value but never used.","'useEffect' is defined but never used.","'getArea' is defined but never used.","'TileWMS' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\(.","Literal","unnecessaryEscape",["326","327"],"Assign arrow function to a variable before exporting as module default","React Hook useEffect has a missing dependency: 'alert'. Either include it or remove the dependency array.",["328"],"React Hook useMemo has a missing dependency: 'props'. Either include it or remove the dependency array.",["329"],"'mapComponentModule' is defined but never used.","React Hook useEffect has a missing dependency: 'prevData'. Either include it or remove the dependency array.",["330"],"'index' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'draw', 'idKey', 'props.OverLayComponent', and 'update'. Either include them or remove the dependency array.",["331"],"React Hook useCallback has missing dependencies: 'maxZoom', 'minZoom', 'xKey', and 'yKey'. Either include them or remove the dependency array.",["332"],"'polygon' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'calculateExtent' and 'drawExtentMultiple'. Either include them or remove the dependency array.",["333"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useCallback has missing dependencies: 'calculateExtent', 'checkDrawEnable', 'data', 'drawExtentMultiple', 'idKey', 'xKey', and 'yKey'. Either include them or remove the dependency array.",["334"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["335"],"React Hook useCallback has a missing dependency: 'drawExtentMultiple'. Either include it or remove the dependency array.",["336"],"React Hook useMemo has an unnecessary dependency: 'props.buttons'. Either exclude it or remove the dependency array. Outer scope values like 'props.buttons' aren't valid dependencies because mutating them doesn't re-render the component.",["337"],["320"],["321"],"'Provider' is defined but never used.",["320"],["321"],"'check' is defined but never used.","'useRef' is defined but never used.","'Flex' is defined but never used.","'Button' is defined but never used.","'ReportHandler' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"messageId":"346","fix":"347","desc":"348"},{"messageId":"349","fix":"350","desc":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},"Update the dependencies array to be: [location, props.login, props.sessionReducer]",{"range":"372","text":"373"},"Update the dependencies array to be: [history.action, historyStack.historyStack, location.key]",{"range":"374","text":"375"},"Update the dependencies array to be: [location.pathname, classNames, history.action, historyStack.historyStack, location.key]",{"range":"376","text":"377"},"Update the dependencies array to be: [props.mapComponentReducer]",{"range":"378","text":"379"},"removeEscape",{"range":"380","text":"381"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"382","text":"383"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [alert, login]",{"range":"384","text":"385"},"Update the dependencies array to be: [props]",{"range":"386","text":"387"},"Update the dependencies array to be: [data, prevData]",{"range":"388","text":"389"},"Update the dependencies array to be: [props.mapObject, dataState, props.OverLayComponent, update, data, idKey, draw]",{"range":"390","text":"391"},"Update the dependencies array to be: [maxZoom, minZoom, xKey, yKey]",{"range":"392","text":"393"},"Update the dependencies array to be: [props.mapObject, drawExtentMultiple, calculateExtent]",{"range":"394","text":"395"},"Update the dependencies array to be: [props.mapObject, drawExtentMultiple, data, calculateExtent, checkDrawEnable, idKey, xKey, yKey]",{"range":"396","text":"397"},"Update the dependencies array to be: [props.mapObject, overlays, draw]",{"range":"398","text":"399"},"Update the dependencies array to be: [drawExtentMultiple]",{"range":"400","text":"401"},"Update the dependencies array to be: []",{"range":"402","text":"403"},[1561,1571],"[location, props.login, props.sessionReducer]",[1831,1850],"[history.action, historyStack.historyStack, location.key]",[2200,2231],"[location.pathname, classNames, history.action, historyStack.historyStack, location.key]",[825,827],"[props.mapComponentReducer]",[13510,13511],"",[13510,13510],"\\",[397,404],"[alert, login]",[702,715],"[props]",[1540,1546],"[data, prevData]",[2499,2527],"[props.mapObject, dataState, props.OverLayComponent, update, data, idKey, draw]",[3069,3086],"[maxZoom, minZoom, xKey, yKey]",[4143,4170],"[props.mapObject, drawExtentMultiple, calculateExtent]",[6904,6931],"[props.mapObject, drawExtentMultiple, data, calculateExtent, checkDrawEnable, idKey, xKey, yKey]",[7208,7235],"[props.mapObject, overlays, draw]",[9717,9744],"[drawExtentMultiple]",[515,530],"[]"]